% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Filter.R
\docType{data}
\name{Filter}
\alias{Filter}
\title{Filter Base Class}
\format{\link[R6:R6Class]{R6::R6Class} object.}
\description{
This is the base class for filters.
Predefined filters are stored in \link{mlr_filters}.
}
\section{Construction}{
\preformatted{f = Filter$new(id, task_type, param_set, param_vals, feature_types, packages)
}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier for the learner.
\item \code{task_type} :: \code{character(1)}\cr
Type of the task the learner can operator on. E.g., \code{"classif"} or \code{"regr"}.
\item \code{param_set} :: \link[paradox:ParamSet]{paradox::ParamSet}\cr
Set of hyperparameters.
\item \code{param_vals} :: named \code{list()}\cr
List of hyperparameter settings.
\item \code{feature_types} :: \code{character()}\cr
Feature types the learner operates on. Must be a subset of \code{mlr_reflections$task_feature_types}.
\item \code{packages} :: \code{character()}\cr
Set of required packages.
Note that these packages will be loaded via \code{\link[=requireNamespace]{requireNamespace()}}, and are not attached.
}
}

\section{Fields}{

\itemize{
\item \code{id} :: \code{character(1)}\cr
Stores the identifier of the filter.
\item \code{task_type} :: \code{character(1)}\cr
Stores the type of class this learner can operate on, e.g. \code{"classif"} or \code{"regr"}.
A complete list of task types is stored in \code{\link[mlr3:mlr_reflections]{mlr_reflections$task_types}}.
\item \code{param_set} :: \link[paradox:ParamSet]{paradox::ParamSet}\cr
Description of available hyperparameters and hyperparameter settings.
\item \code{feature_types} :: \code{character()}\cr
Stores the feature types the learner can handle, e.g. \code{"logical"}, \code{"numeric"}, or \code{"factor"}.
A complete list of candidate feature types, grouped by task type, is stored in \code{\link[mlr3:mlr_reflections]{mlr_reflections$task_feature_types}}.
\item \code{packages} :: \code{character()}\cr
Stores the names of required packages.
\item \code{filter_values} :: \code{numeric()}\cr
Stores the calculated filter values.
}
}

\section{Methods}{

\itemize{
\item \code{calculate(task)}\cr
\link{Task} -> \code{numeric()}\cr
Calculates the filter values for the provided \link{Task} and stores them in field \code{filter_values}.
\item \code{filter_abs(task, abs)}\cr
(\link{Task}, \code{integer(1)}) -> \link{Task}\cr
Filters the \link{Task} by reference, keeps up to \code{abs} features.
\item \code{filter_perc(task, perc)}\cr
(\link{Task}, \code{numeric(1)}) -> \link{Task}\cr
Filters the \link{Task} by reference, keeps \code{perc} percent of the features (rounded via \code{\link[base:round]{base::round()}}).
\item \code{filter_perc(task, thresh)}\cr
(\link{Task}, \code{numeric(1)}) -> \link{Task}\cr
Filters the \link{Task} by reference, keeps features whose filter values exceeds \code{thresh}.
}
}

\seealso{
Other Filter: \code{\link{mlr_filters_auc}},
  \code{\link{mlr_filters_cmim}},
  \code{\link{mlr_filters_disr}},
  \code{\link{mlr_filters_gain_ratio}},
  \code{\link{mlr_filters_information_gain}},
  \code{\link{mlr_filters_jmim}},
  \code{\link{mlr_filters_jmi}},
  \code{\link{mlr_filters_kruskal_test}},
  \code{\link{mlr_filters_linear_correlation}},
  \code{\link{mlr_filters_mim}},
  \code{\link{mlr_filters_njmim}},
  \code{\link{mlr_filters_rank_correlation}},
  \code{\link{mlr_filters_symmetrical_uncertainty}},
  \code{\link{mlr_filters_variance}},
  \code{\link{mlr_filters}}
}
\concept{Filter}
\keyword{datasets}
